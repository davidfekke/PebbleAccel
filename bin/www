#!/usr/bin/env node
/// <reference path="../typings/node/node.d.ts"/>
/**
 * Module dependencies.
 */

var debug = require('debug')('sockettest:server');
var app = require('../app');
var server = require('http').Server(app);
var io = require('socket.io')(server);

var https = require('https'),
	querystring = require('querystring'),
	body = "",
	returnValue = "",
	accessToken = process.env.SPARKACCESSTOKEN; //process.env.SPARKACCESSTOKEN

var httpsOptions = {
	hostname: 'api.spark.io',
	port: 443,
	path: '/v1/devices/' + process.env.ZEDDEVICE + '/sumocar', //process.env.ZEDDEVICE
	method: 'POST',
	headers: {
		'Accept': '*/*',
		'Accept-Language': 'en-US,en;q=0.8',
		'Accept-Encoding': 'gzip,deflate,sdch',
		'Content-Type': 'application/x-www-form-urlencoded'
	}
};

var express = require('express');
var ioRoutes = express.Router();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


io.on('connection', function(socket){
  console.log('a user connected');
});

ioRoutes.get('/test', function (req, res, next) {
  res.render('index', { title: 'Express' });
});

ioRoutes.get('/accel/:x/:y/:z', function (req, res, next) {
  var xaxis = req.params.x;
  var yaxis = req.params.y;
  var servoPower = convertLRValuesToLRServo(getServoPower(xaxis, yaxis));
  // Convert L R values to CW and CCW servo values. i.e. -100 = 0, 100 = 180
  console.log(servoPower);
  io.emit('acceldata', { "x": req.params.x, "y": req.params.y, "z": req.params.z });
  var post_data = querystring.stringify({
		'access_token': accessToken,
		'params': servoPower.L + ',' + servoPower.R
	});
	callSparkService(post_data, res);
});

function convertLRValuesToLRServo(motorObject) {
  var left = 90, right = 90;
  left = (motorObject.L + 100) * 0.9;
  right = 180 - (motorObject.R + 100) * 0.9;
  return {
    "L": left,
    "R": right
  };
}

function callSparkService(postData, res) {
	var post_data = postData;
	httpsOptions.headers['Content-Length'] = post_data.length;
	var retValue = "";
	var request = https.request(httpsOptions, function(response) {
		console.log('STATUS: ' + response.statusCode);
		response.setEncoding('utf8');
		response.on('data', function (chunk) {
			//console.log('BODY: ' + chunk);
			retValue += chunk;
		});
		response.on('end', function() {
			console.log('request has ended.');
			//console.log(body);
			//retValue = JSON.parse(body);
			res.send(retValue);
		});
	});
	
	request.on('error', function(e) {
		console.log('problem with request: ' + e.message);
	});

	// write data to request body
	request.write(post_data);
	request.end();
}

app.use('/io', ioRoutes);

/**
 * Listen on provided port, on all network interfaces.
 */

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * This function converts the accelerometer data into Servo motor inputs 
 */
function getServoPower(x, y) {
  if (x > 1000) {
    x = 1000;
  }
  if (x < -1000) {
    x = -1000;
  }
  if (y > 1000) {
    y = 1000;
  }
  if (y < -1000) {
    y = -1000;
  }
  
	var right = y / 10, left = y / 10, diff = 0;
	right -=  (x/10);
	left +=  (x/10); 
  
	if (right > 100) {
		diff = right - 100;
	}
	if (left > 100) {
		diff = left - 100;
	}
	if (right < -100) {
		diff = right + 100;
	}
	if (left < -100)
	{
		diff = left + 100;
	}
	right -= diff;
	left -= diff;
   
	return { "L": left, "R": right };
}